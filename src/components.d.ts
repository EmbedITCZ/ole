/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import { MdButton as OleButton } from './components/button/button';

interface HTMLOleButtonElement extends OleButton, HTMLElement {
}
declare var HTMLOleButtonElement: {
  prototype: HTMLOleButtonElement;
  new (): HTMLOleButtonElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ole-button": HTMLOleButtonElement;
  }
  interface ElementTagNameMap {
      "ole-button": HTMLOleButtonElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ole-button": JSXElements.OleButtonAttributes;
      }
  }
  namespace JSXElements {
      export interface OleButtonAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { Icon as OleIcon } from './components/icon/icon';

interface HTMLOleIconElement extends OleIcon, HTMLElement {
}
declare var HTMLOleIconElement: {
  prototype: HTMLOleIconElement;
  new (): HTMLOleIconElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ole-icon": HTMLOleIconElement;
  }
  interface ElementTagNameMap {
      "ole-icon": HTMLOleIconElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ole-icon": JSXElements.OleIconAttributes;
      }
  }
  namespace JSXElements {
      export interface OleIconAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          type?: string,
          inToolbar?: boolean,
          inButton?: boolean
      }
  }
}

import { MyComponent as MyComponent } from './components/my-component/my-component';

interface HTMLMyComponentElement extends MyComponent, HTMLElement {
}
declare var HTMLMyComponentElement: {
  prototype: HTMLMyComponentElement;
  new (): HTMLMyComponentElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-component": HTMLMyComponentElement;
  }
  interface ElementTagNameMap {
      "my-component": HTMLMyComponentElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-component": JSXElements.MyComponentAttributes;
      }
  }
  namespace JSXElements {
      export interface MyComponentAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          first?: string,
          last?: string
      }
  }
}

import { Title as OleToolbarTitle } from './components/toolbar/title';

interface HTMLOleToolbarTitleElement extends OleToolbarTitle, HTMLElement {
}
declare var HTMLOleToolbarTitleElement: {
  prototype: HTMLOleToolbarTitleElement;
  new (): HTMLOleToolbarTitleElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ole-toolbar-title": HTMLOleToolbarTitleElement;
  }
  interface ElementTagNameMap {
      "ole-toolbar-title": HTMLOleToolbarTitleElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ole-toolbar-title": JSXElements.OleToolbarTitleAttributes;
      }
  }
  namespace JSXElements {
      export interface OleToolbarTitleAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { Toolbar as OleToolbar } from './components/toolbar/toolbar';

interface HTMLOleToolbarElement extends OleToolbar, HTMLElement {
}
declare var HTMLOleToolbarElement: {
  prototype: HTMLOleToolbarElement;
  new (): HTMLOleToolbarElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ole-toolbar": HTMLOleToolbarElement;
  }
  interface ElementTagNameMap {
      "ole-toolbar": HTMLOleToolbarElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ole-toolbar": JSXElements.OleToolbarAttributes;
      }
  }
  namespace JSXElements {
      export interface OleToolbarAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

