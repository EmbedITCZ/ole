/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import { OleBox as OleBox } from './components/box/box';

interface HTMLOleBoxElement extends OleBox, HTMLElement {
}
declare var HTMLOleBoxElement: {
  prototype: HTMLOleBoxElement;
  new (): HTMLOleBoxElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ole-box": HTMLOleBoxElement;
  }
  interface ElementTagNameMap {
      "ole-box": HTMLOleBoxElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ole-box": JSXElements.OleBoxAttributes;
      }
  }
  namespace JSXElements {
      export interface OleBoxAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { OleButton as OleButton } from './components/button/button';

interface HTMLOleButtonElement extends OleButton, HTMLElement {
}
declare var HTMLOleButtonElement: {
  prototype: HTMLOleButtonElement;
  new (): HTMLOleButtonElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ole-button": HTMLOleButtonElement;
  }
  interface ElementTagNameMap {
      "ole-button": HTMLOleButtonElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ole-button": JSXElements.OleButtonAttributes;
      }
  }
  namespace JSXElements {
      export interface OleButtonAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          type?: string,
          value?: string,
          disabled?: boolean,
          size?: string,
          outlined?: boolean,
          inverted?: boolean,
          hovered?: boolean,
          focused?: boolean,
          active?: boolean,
          loading?: boolean
      }
  }
}

import { OleColumn as OleColumn } from './components/columns/column';

interface HTMLOleColumnElement extends OleColumn, HTMLElement {
}
declare var HTMLOleColumnElement: {
  prototype: HTMLOleColumnElement;
  new (): HTMLOleColumnElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ole-column": HTMLOleColumnElement;
  }
  interface ElementTagNameMap {
      "ole-column": HTMLOleColumnElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ole-column": JSXElements.OleColumnAttributes;
      }
  }
  namespace JSXElements {
      export interface OleColumnAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          size?: string
      }
  }
}

import { OleColumns as OleColumns } from './components/columns/columns';

interface HTMLOleColumnsElement extends OleColumns, HTMLElement {
}
declare var HTMLOleColumnsElement: {
  prototype: HTMLOleColumnsElement;
  new (): HTMLOleColumnsElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ole-columns": HTMLOleColumnsElement;
  }
  interface ElementTagNameMap {
      "ole-columns": HTMLOleColumnsElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ole-columns": JSXElements.OleColumnsAttributes;
      }
  }
  namespace JSXElements {
      export interface OleColumnsAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          size?: string
      }
  }
}

import { OleContainer as OleContainer } from './components/container/container';

interface HTMLOleContainerElement extends OleContainer, HTMLElement {
}
declare var HTMLOleContainerElement: {
  prototype: HTMLOleContainerElement;
  new (): HTMLOleContainerElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ole-container": HTMLOleContainerElement;
  }
  interface ElementTagNameMap {
      "ole-container": HTMLOleContainerElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ole-container": JSXElements.OleContainerAttributes;
      }
  }
  namespace JSXElements {
      export interface OleContainerAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          type?: string
      }
  }
}

import { Icon as OleIcon } from './components/icon/icon';

interface HTMLOleIconElement extends OleIcon, HTMLElement {
}
declare var HTMLOleIconElement: {
  prototype: HTMLOleIconElement;
  new (): HTMLOleIconElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ole-icon": HTMLOleIconElement;
  }
  interface ElementTagNameMap {
      "ole-icon": HTMLOleIconElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ole-icon": JSXElements.OleIconAttributes;
      }
  }
  namespace JSXElements {
      export interface OleIconAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          type?: string,
          size?: any
      }
  }
}

import { NavbarItem as OleNavbarItem } from './components/navbar/navbar-item';

interface HTMLOleNavbarItemElement extends OleNavbarItem, HTMLElement {
}
declare var HTMLOleNavbarItemElement: {
  prototype: HTMLOleNavbarItemElement;
  new (): HTMLOleNavbarItemElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ole-navbar-item": HTMLOleNavbarItemElement;
  }
  interface ElementTagNameMap {
      "ole-navbar-item": HTMLOleNavbarItemElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ole-navbar-item": JSXElements.OleNavbarItemAttributes;
      }
  }
  namespace JSXElements {
      export interface OleNavbarItemAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { Navbar as OleNavbar } from './components/navbar/navbar';

interface HTMLOleNavbarElement extends OleNavbar, HTMLElement {
}
declare var HTMLOleNavbarElement: {
  prototype: HTMLOleNavbarElement;
  new (): HTMLOleNavbarElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ole-navbar": HTMLOleNavbarElement;
  }
  interface ElementTagNameMap {
      "ole-navbar": HTMLOleNavbarElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ole-navbar": JSXElements.OleNavbarAttributes;
      }
  }
  namespace JSXElements {
      export interface OleNavbarAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { OlePaginationEllipsis as OlePaginationEllipsis } from './components/pagination/pagination-ellipsis';

interface HTMLOlePaginationEllipsisElement extends OlePaginationEllipsis, HTMLElement {
}
declare var HTMLOlePaginationEllipsisElement: {
  prototype: HTMLOlePaginationEllipsisElement;
  new (): HTMLOlePaginationEllipsisElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ole-pagination-ellipsis": HTMLOlePaginationEllipsisElement;
  }
  interface ElementTagNameMap {
      "ole-pagination-ellipsis": HTMLOlePaginationEllipsisElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ole-pagination-ellipsis": JSXElements.OlePaginationEllipsisAttributes;
      }
  }
  namespace JSXElements {
      export interface OlePaginationEllipsisAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { OlePaginationLink as OlePaginationLink } from './components/pagination/pagination-link';

interface HTMLOlePaginationLinkElement extends OlePaginationLink, HTMLElement {
}
declare var HTMLOlePaginationLinkElement: {
  prototype: HTMLOlePaginationLinkElement;
  new (): HTMLOlePaginationLinkElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ole-pagination-link": HTMLOlePaginationLinkElement;
  }
  interface ElementTagNameMap {
      "ole-pagination-link": HTMLOlePaginationLinkElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ole-pagination-link": JSXElements.OlePaginationLinkAttributes;
      }
  }
  namespace JSXElements {
      export interface OlePaginationLinkAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          href?: string,
          label?: string,
          current?: boolean
      }
  }
}

import { OlePaginationList as OlePaginationList } from './components/pagination/pagination-list';

interface HTMLOlePaginationListElement extends OlePaginationList, HTMLElement {
}
declare var HTMLOlePaginationListElement: {
  prototype: HTMLOlePaginationListElement;
  new (): HTMLOlePaginationListElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ole-pagination-list": HTMLOlePaginationListElement;
  }
  interface ElementTagNameMap {
      "ole-pagination-list": HTMLOlePaginationListElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ole-pagination-list": JSXElements.OlePaginationListAttributes;
      }
  }
  namespace JSXElements {
      export interface OlePaginationListAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { OlePaginationNext as OlePaginationNext } from './components/pagination/pagination-next';

interface HTMLOlePaginationNextElement extends OlePaginationNext, HTMLElement {
}
declare var HTMLOlePaginationNextElement: {
  prototype: HTMLOlePaginationNextElement;
  new (): HTMLOlePaginationNextElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ole-pagination-next": HTMLOlePaginationNextElement;
  }
  interface ElementTagNameMap {
      "ole-pagination-next": HTMLOlePaginationNextElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ole-pagination-next": JSXElements.OlePaginationNextAttributes;
      }
  }
  namespace JSXElements {
      export interface OlePaginationNextAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          href?: string
      }
  }
}

import { OlePaginationPrevious as OlePaginationPrevious } from './components/pagination/pagination-previous';

interface HTMLOlePaginationPreviousElement extends OlePaginationPrevious, HTMLElement {
}
declare var HTMLOlePaginationPreviousElement: {
  prototype: HTMLOlePaginationPreviousElement;
  new (): HTMLOlePaginationPreviousElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ole-pagination-previous": HTMLOlePaginationPreviousElement;
  }
  interface ElementTagNameMap {
      "ole-pagination-previous": HTMLOlePaginationPreviousElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ole-pagination-previous": JSXElements.OlePaginationPreviousAttributes;
      }
  }
  namespace JSXElements {
      export interface OlePaginationPreviousAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          href?: string
      }
  }
}

import { OlePagination as OlePagination } from './components/pagination/pagination';

interface HTMLOlePaginationElement extends OlePagination, HTMLElement {
}
declare var HTMLOlePaginationElement: {
  prototype: HTMLOlePaginationElement;
  new (): HTMLOlePaginationElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ole-pagination": HTMLOlePaginationElement;
  }
  interface ElementTagNameMap {
      "ole-pagination": HTMLOlePaginationElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ole-pagination": JSXElements.OlePaginationAttributes;
      }
  }
  namespace JSXElements {
      export interface OlePaginationAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          size?: string
      }
  }
}

import { OleSection as OleSection } from './components/section/section';

interface HTMLOleSectionElement extends OleSection, HTMLElement {
}
declare var HTMLOleSectionElement: {
  prototype: HTMLOleSectionElement;
  new (): HTMLOleSectionElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "ole-section": HTMLOleSectionElement;
  }
  interface ElementTagNameMap {
      "ole-section": HTMLOleSectionElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "ole-section": JSXElements.OleSectionAttributes;
      }
  }
  namespace JSXElements {
      export interface OleSectionAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          size?: string
      }
  }
}

